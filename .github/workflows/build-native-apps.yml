name: Release

on:
  push:
    branches: [ "main" ]

env:
  ContinuousIntegrationBuild: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      AssemblyVersion: ${{ steps.nbgv.outputs.AssemblyVersion }}
      AssemblyFileVersion: ${{ steps.nbgv.outputs.AssemblyFileVersion }}
      AssemblyInformationalVersion: ${{ steps.nbgv.outputs.AssemblyInformationalVersion }}
      SemVer2: ${{ steps.nbgv.outputs.SemVer2 }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Set version information
        uses: dotnet/nbgv@v0.4.1
        id: nbgv

  build:
    needs:
      - version
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            cross-compile: false
            configuration: Debug
          - os: windows-latest
            rid: win-x64
            cross-compile: false
            configuration: Release
          - os: ubuntu-latest
            rid: linux-x64
            cross-compile: false
            configuration: Debug
          - os: ubuntu-latest
            rid: linux-x64
            cross-compile: false
            configuration: Release
          - os: ubuntu-latest
            rid: linux-arm64
            cross-compile: true
            configuration: Debug
          - os: ubuntu-latest
            rid: linux-arm64
            cross-compile: true
            configuration: Release
          - os: macos-latest
            rid: osx-arm64
            cross-compile: false
            configuration: Debug
          - os: macos-latest
            rid: osx-arm64
            cross-compile: false
            configuration: Release
    
    runs-on: ${{ matrix.os }}
    name: "Build ${{ matrix.rid }}-${{ matrix.configuration }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3.3.2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-${{ matrix.rid }}-nuget-${{ hashFiles('**/*.csproj') }} #hash of project files
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rid }}-nuget-
      - name: Install cross compilation tools
        if: matrix.cross-compile == true
        run: |
          sudo dpkg --add-architecture arm64
          sudo bash -c 'cat > /etc/apt/sources.list.d/arm64.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse
          EOF'
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo sed -i -e 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
          sudo apt update
          sudo apt install -y clang llvm binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu zlib1g-dev:arm64
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Setup build environment
        shell: bash
        run: |
          echo "AssemblyVersion=${{ needs.version.outputs.AssemblyVersion }}" >> $GITHUB_ENV
          echo "AssemblyFileVersion=${{ needs.version.outputs.AssemblyFileVersion }}" >> $GITHUB_ENV
          echo "AssemblyInformationalVersion=${{ needs.version.outputs.AssemblyInformationalVersion }}" >> $GITHUB_ENV
      - name: .NET Publish - ${{ needs.version.outputs.SemVer2 }} (${{ matrix.rid }})
        run: |
          dotnet publish StrangeSoft.DotNetInstaller -o publish/ -r ${{ matrix.rid }} -c ${{ matrix.configuration }} -p:PublishAot=true 
      - name: Upload installer app symbols
        uses: actions/upload-artifact@v4.0.0
        with:
          name: installer-${{ matrix.rid }}-${{ matrix.configuration }}
          path: publish/*
  pack:
    name: "Create NuGet package"
    runs-on: ubuntu-latest
    needs: 
      - version
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3.3.2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} #hash of project files
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Setup build environment
        shell: bash
        run: |
          echo "AssemblyVersion=${{ needs.version.outputs.AssemblyVersion }}" >> $GITHUB_ENV
          echo "AssemblyFileVersion=${{ needs.version.outputs.AssemblyFileVersion }}" >> $GITHUB_ENV
          echo "AssemblyInformationalVersion=${{ needs.version.outputs.AssemblyInformationalVersion }}" >> $GITHUB_ENV
      - name: Create NuGet package
        run: |
          dotnet pack -o publish -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -p:StripSymbols=false -p:DebugSymbols=true -p:DebugType=portable
      - name: Upload NuGet package
        uses: actions/upload-artifact@v4.0.0
        with:
          name: nuget-package
          path: |
            publish/*.nupkg
            publish/*.snupkg
  publish:
    name: "Publish NuGet packages (${{ matrix.name }})"
    strategy:
      matrix:
        include:
          - name: "nuget.org"
            source: https://api.nuget.org/v3/index.json
            #api-key: ${{ secrets.NUGET_KEY }}
            secret: NUGET_KEY
          - name: "github.com"
            source: https://nuget.pkg.github.com/jasoncouture/index.json
            # api-key: ${{ secrets.GITHUB_TOKEN }}
            secret: GITHUB_TOKEN
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs:
      - pack
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Download package artifact
        uses: actions/download-artifact@v4.0.0
        with:
          name: nuget-package
          path: artifacts/
      - name: Publish
        run: 'dotnet nuget push artifacts/*.nupkg --api-key "${{ secrets[matrix.secret] }}" --source "${{ matrix.source }}"'

  release:
    name: "Create release"
    runs-on: ubuntu-latest
    needs:
      - version
      - build
      - pack
      - publish
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download build artifacts
        uses: actions/download-artifact@v4.0.0
        with:
          path: artifacts/
      - name: Move NuGet package
        run: |
          mv artifacts/nuget-package/* artifacts/
          rm -rf artifacts/nuget-package
      - name: Zip artifacts
        shell: bash
        run: |
          for dir in artifacts/*/
          do
            pushd $dir
            zip -r "../$(basename $dir).zip" *
            popd
          done
      - name: "Create Release v${{ needs.version.outputs.SemVer2 }}"
        uses: ncipollo/release-action@v1.13.0
        with:
          artifacts: "artifacts/*.zip,artifacts/*.nupkg,artifacts/*.snupkg,LICENSE.md"
          generateReleaseNotes: true
          commit: main
          tag: "v${{ needs.version.outputs.SemVer2 }}"
          artifactErrorsFailBuild: true
          name: "${{ needs.version.outputs.SemVer2 }}"

    
